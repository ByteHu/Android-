// 参考网址: http://www.gcssloop.com/customview/CustomViewIndex/

// 屏幕坐标系: X轴:向右变大; Y轴:向下变大

// View坐标系: 相对于父控件而言

getTop();       //获取子View左上角距父View顶部的距离
getLeft();      //获取子View左上角距父View左侧的距离
getBottom();    //获取子View右下角距父View顶部的距离
getRight();     //获取子View右下角距父View左侧的距离

// MotionEvent中 get 和 getRaw 的区别

event.getX();       //触摸点相对于其所在组件坐标系的坐标
event.getY();

event.getRawX();    //触摸点相对于屏幕默认坐标系的坐标
event.getRawY();

// 安卓中角度(angle)与弧度(radian)的有关问题

// 角度是60进制，弧度是10进制

// 例如： 角度是60进位制，遇到30°6′这样的角，应该转化为10进制的30.1°。但弧度就不需要，因为弧度本身就是十进制的实数

// 角度定义: 两条射线从圆心向圆周射出，形成一个夹角和夹角正对的一段弧。当这段弧长正好等于圆周长的360分之一时，两条射线的夹角的大小为1度

// 弧度定义: 两条射线从圆心向圆周射出，形成一个夹角和夹角正对的一段弧。当这段弧长正好等于圆的半径时，两条射线的夹角大小为1弧度

// 弧度/角度 换算
// rad = deg x π / 180
// deg = rad x 180 / π

// 屏幕坐标系中角度增大方向为顺时针

// Java中定义颜色

int color = Color.GRAY;     //灰色

int color = Color.argb(127, 255, 0, 0);   //半透明红色

int color = 0xaaff0000;                   //带有透明度的红色

// 在xml文件中定义颜色

// 在/res/values/color.xml 文件中如下定义：
// 在以下xml文件中定义了两个颜色，红色和绿色，是没有alpha（透明）通道的
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <color name="red">#ff0000</color>
    <color name="green">#00ff00</color>
</resources>

// 定义颜色以‘#’开头，后面跟十六进制的值，有如下几种定义方式：

#f00            //低精度 - 不带透明通道红色
#af00           //低精度 - 带透明通道红色

#ff0000         //高精度 - 不带透明通道红色
#aaff0000       //高精度 - 带透明通道红色

// 在java文件中引用xml中定义的颜色

int color = getResources().getColor(R.color.mycolor);

// 在xml文件(layout或style)中引用或者创建颜色

<!--在style文件中引用-->
<style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
    <item name="colorPrimary">@color/red</item>
</style>

android:background="@color/red"     //引用在/res/values/color.xml 中定义的颜色

android:background="#ff0000"        //创建并使用颜色

// View的构造函数有四种重载分别如下:

public void SloopView(Context context) {}
public void SloopView(Context context, AttributeSet attrs) {}
public void SloopView(Context context, AttributeSet attrs, int defStyleAttr) {}
public void SloopView(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {}

// 有四个参数的构造函数在API21的时候才添加上，暂不考虑
// 由于三个参数的构造函数第三个参数一般不用，暂不考虑

//一般在直接New一个View的时候调用。
public void SloopView(Context context) {}

//一般在layout文件中使用的时候会调用，关于它的所有属性(包括自定义属性)都会包含在attrs中传递进来。
public void SloopView(Context context, AttributeSet attrs) {}

// 以下方法调用的是一个参数的构造函数：
//在Avtivity中
SloopView view  new SloopView(this);

// 以下方法调用的是两个参数的构造函数：
//在layout文件中 - 格式为： 包名.View名
<com.sloop.study.SloopView
  android:layout_width"wrap_content"
  android:layout_height"wrap_content"/>
  
// 测量View大小(onMeasure)
// View的大小不仅由自身所决定，同时也会受到父控件的影响，为了我们的控件能更好的适应各种情况，一般会自己进行测量

// 测量View大小使用的是onMeasure函数，我们可以从onMeasure的两个参数中取出宽高的相关数据：
@Override
protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
    int widthsize  MeasureSpec.getSize(widthMeasureSpec);      //取出宽度的确切数值
    int widthmode  MeasureSpec.getMode(widthMeasureSpec);      //取出宽度的测量模式
    
    int heightsize  MeasureSpec.getSize(heightMeasureSpec);    //取出高度的确切数值
    int heightmode  MeasureSpec.getMode(heightMeasureSpec);    //取出高度的测量模式
}

// 从上面可以看出 onMeasure 函数中有 widthMeasureSpec 和 heightMeasureSpec 这两个 int 类型的参数，
// 毫无疑问他们是和宽高相关的， 但它们其实不是宽和高， 而是由宽、高和各自方向上对应的测量模式来合成的一个值：

// 测量模式一共有三种， 被定义在 Android 中的 View 类的一个内部类View.MeasureSpec中：
// 模式				二进制数值			描述
// UNSPECIFIED		00					默认值，父控件没有给子view任何限制，子View可以设置为任意大小。
// EXACTLY			01					表示父控件已经确切的指定了子View的大小。
// AT_MOST			10					表示子View具体大小没有尺寸限制，但是存在上限，上限一般为父View大小。
// MeasureSpec 的 getSize是获取数值， getMode是获取模式

// 注意：
// 如果要对View的宽高进行修改，
// 不要调用 super.onMeasure( widthMeasureSpec, heightMeasureSpec); 
// 要调用 setMeasuredDimension( widthsize, heightsize); 这个函数。

// 确定View大小(onSizeChanged)
// 这个函数在视图大小发生改变时调用

// 因为View的大小不仅由View本身控制，而且受父控件的影响，
// 所以我们在确定View大小的时候最好使用系统提供的onSizeChanged回调函数

@Override
protected void onSizeChanged(int w, int h, int oldw, int oldh) {
    super.onSizeChanged(w, h, oldw, oldh);
}

// 它又四个参数，分别为 宽度，高度，上一次宽度，上一次高度
// 只需关注 宽度(w), 高度(h) 即可，这两个参数就是View最终的大小

// 确定子View布局位置(onLayout)
// 确定布局的函数是onLayout，它用于确定子View的位置，在自定义ViewGroup中会用到，他调用的是子View的layout函数

// 在自定义ViewGroup中，onLayout一般是循环取出子View，然后经过计算得出各个子View位置的坐标值，然后用以下函数设置子View位置。
child.layout(l, t, r, b);

// 四个参数分别为：

// 名称		说明							对应的函数
// l		View左侧距父View左侧的距离		getLeft();
// t		View顶部距父View顶部的距离		getTop();
// r		View右侧距父View左侧的距离		getRight();
// b		View底部距父View顶部的距离		getBottom();

// 绘制内容(onDraw)
// onDraw是实际绘制的部分，也就是我们真正关心的部分，使用的是Canvas绘图
@Override
protected void onDraw(Canvas canvas) {
    super.onDraw(canvas);
}

// 对外提供操作方法和监听回调
// 自定义完View之后，一般会对外暴露一些接口，用于控制View的状态等，或者监听View的变化

// 自定义View分类:
// ViewGroup是View的一个子类

// 类别			继承自					特点
// View			View SurfaceView 等		不含子View
// ViewGroup	ViewGroup xxLayout等	包含子View

// 自定义View流程：
// 步骤		关键字			作用
// 1		构造函数		View初始化
// 2		onMeasure		测量View大小
// 3		onSizeChanged	确定View大小
// 4		onLayout		确定子View布局(自定义View包含子View时有用)
// 5		onDraw			实际绘制内容
// 6		提供接口		控制View或监听View某些状态。