// 参考网址: http://www.gcssloop.com/customview/CustomViewIndex/

// 屏幕坐标系: X轴:向右变大; Y轴:向下变大

// View坐标系: 相对于父控件而言

getTop();       //获取子View左上角距父View顶部的距离
getLeft();      //获取子View左上角距父View左侧的距离
getBottom();    //获取子View右下角距父View顶部的距离
getRight();     //获取子View右下角距父View左侧的距离

// MotionEvent中 get 和 getRaw 的区别

event.getX();       //触摸点相对于其所在组件坐标系的坐标
event.getY();

event.getRawX();    //触摸点相对于屏幕默认坐标系的坐标
event.getRawY();

// 安卓中角度(angle)与弧度(radian)的有关问题

// 角度是60进制，弧度是10进制

// 例如： 角度是60进位制，遇到30°6′这样的角，应该转化为10进制的30.1°。但弧度就不需要，因为弧度本身就是十进制的实数

// 角度定义: 两条射线从圆心向圆周射出，形成一个夹角和夹角正对的一段弧。当这段弧长正好等于圆周长的360分之一时，两条射线的夹角的大小为1度

// 弧度定义: 两条射线从圆心向圆周射出，形成一个夹角和夹角正对的一段弧。当这段弧长正好等于圆的半径时，两条射线的夹角大小为1弧度

// 弧度/角度 换算
// rad = deg x π / 180
// deg = rad x 180 / π

// 屏幕坐标系中角度增大方向为顺时针

// Java中定义颜色

int color = Color.GRAY;     //灰色

int color = Color.argb(127, 255, 0, 0);   //半透明红色

int color = 0xaaff0000;                   //带有透明度的红色

// 在xml文件中定义颜色

// 在/res/values/color.xml 文件中如下定义：
// 在以下xml文件中定义了两个颜色，红色和绿色，是没有alpha（透明）通道的
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <color name="red">#ff0000</color>
    <color name="green">#00ff00</color>
</resources>

// 定义颜色以‘#’开头，后面跟十六进制的值，有如下几种定义方式：

#f00            //低精度 - 不带透明通道红色
#af00           //低精度 - 带透明通道红色

#ff0000         //高精度 - 不带透明通道红色
#aaff0000       //高精度 - 带透明通道红色

// 在java文件中引用xml中定义的颜色

int color = getResources().getColor(R.color.mycolor);

// 在xml文件(layout或style)中引用或者创建颜色

<!--在style文件中引用-->
<style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
    <item name="colorPrimary">@color/red</item>
</style>

android:background="@color/red"     //引用在/res/values/color.xml 中定义的颜色

android:background="#ff0000"        //创建并使用颜色

// View的构造函数有四种重载分别如下:

public void SloopView(Context context) {}
public void SloopView(Context context, AttributeSet attrs) {}
public void SloopView(Context context, AttributeSet attrs, int defStyleAttr) {}
public void SloopView(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {}

// 有四个参数的构造函数在API21的时候才添加上，暂不考虑
// 由于三个参数的构造函数第三个参数一般不用，暂不考虑

//一般在直接New一个View的时候调用。
public void SloopView(Context context) {}

//一般在layout文件中使用的时候会调用，关于它的所有属性(包括自定义属性)都会包含在attrs中传递进来。
public void SloopView(Context context, AttributeSet attrs) {}

// 以下方法调用的是一个参数的构造函数：
//在Avtivity中
SloopView view  new SloopView(this);

// 以下方法调用的是两个参数的构造函数：
//在layout文件中 - 格式为： 包名.View名
<com.sloop.study.SloopView
  android:layout_width"wrap_content"
  android:layout_height"wrap_content"/>
  
// 测量View大小(onMeasure)
// View的大小不仅由自身所决定，同时也会受到父控件的影响，为了我们的控件能更好的适应各种情况，一般会自己进行测量

// 测量View大小使用的是onMeasure函数，我们可以从onMeasure的两个参数中取出宽高的相关数据：
@Override
protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
    int widthsize  MeasureSpec.getSize(widthMeasureSpec);      //取出宽度的确切数值
    int widthmode  MeasureSpec.getMode(widthMeasureSpec);      //取出宽度的测量模式
    
    int heightsize  MeasureSpec.getSize(heightMeasureSpec);    //取出高度的确切数值
    int heightmode  MeasureSpec.getMode(heightMeasureSpec);    //取出高度的测量模式
}

// 从上面可以看出 onMeasure 函数中有 widthMeasureSpec 和 heightMeasureSpec 这两个 int 类型的参数，
// 毫无疑问他们是和宽高相关的， 但它们其实不是宽和高， 而是由宽、高和各自方向上对应的测量模式来合成的一个值：

// 测量模式一共有三种， 被定义在 Android 中的 View 类的一个内部类View.MeasureSpec中：
// 模式				二进制数值			描述
// UNSPECIFIED		00					默认值，父控件没有给子view任何限制，子View可以设置为任意大小。
// EXACTLY			01					表示父控件已经确切的指定了子View的大小。
// AT_MOST			10					表示子View具体大小没有尺寸限制，但是存在上限，上限一般为父View大小。
// MeasureSpec 的 getSize是获取数值， getMode是获取模式

// 注意：
// 如果要对View的宽高进行修改，
// 不要调用 super.onMeasure( widthMeasureSpec, heightMeasureSpec); 
// 要调用 setMeasuredDimension( widthsize, heightsize); 这个函数。

// 确定View大小(onSizeChanged)
// 这个函数在视图大小发生改变时调用

// 因为View的大小不仅由View本身控制，而且受父控件的影响，
// 所以我们在确定View大小的时候最好使用系统提供的onSizeChanged回调函数

@Override
protected void onSizeChanged(int w, int h, int oldw, int oldh) {
    super.onSizeChanged(w, h, oldw, oldh);
}

// 它又四个参数，分别为 宽度，高度，上一次宽度，上一次高度
// 只需关注 宽度(w), 高度(h) 即可，这两个参数就是View最终的大小

// 确定子View布局位置(onLayout)
// 确定布局的函数是onLayout，它用于确定子View的位置，在自定义ViewGroup中会用到，他调用的是子View的layout函数

// 在自定义ViewGroup中，onLayout一般是循环取出子View，然后经过计算得出各个子View位置的坐标值，然后用以下函数设置子View位置。
child.layout(l, t, r, b);

// 四个参数分别为：

// 名称		说明							对应的函数
// l		View左侧距父View左侧的距离		getLeft();
// t		View顶部距父View顶部的距离		getTop();
// r		View右侧距父View左侧的距离		getRight();
// b		View底部距父View顶部的距离		getBottom();

// 绘制内容(onDraw)
// onDraw是实际绘制的部分，也就是我们真正关心的部分，使用的是Canvas绘图
@Override
protected void onDraw(Canvas canvas) {
    super.onDraw(canvas);
}

// 对外提供操作方法和监听回调
// 自定义完View之后，一般会对外暴露一些接口，用于控制View的状态等，或者监听View的变化

// 自定义View分类:
// ViewGroup是View的一个子类

// 类别			继承自					特点
// View			View SurfaceView 等		不含子View
// ViewGroup	ViewGroup xxLayout等	包含子View

// 自定义View流程：
// 步骤		关键字			作用
// 1		构造函数		View初始化
// 2		onMeasure		测量View大小
// 3		onSizeChanged	确定View大小
// 4		onLayout		确定子View布局(自定义View包含子View时有用)
// 5		onDraw			实际绘制内容
// 6		提供接口		控制View或监听View某些状态。

// Canvas简介

// Canvas我们可以称之为画布，能够在上面绘制各种东西，是安卓平台2D图形绘制的基础，非常强大

// Canvas的常用操作速查表

// 操作类型			相关API																								备注
// 绘制颜色			drawColor, drawRGB, drawARGB																		使用单一颜色填充整个画布
// 绘制基本形状		drawPoint, drawPoints, drawLine, drawLines, drawRect, drawRoundRect, drawOval, drawCircle, drawArc	依次为 点、线、矩形、圆角矩形、椭圆、圆、圆弧
// 绘制图片			drawBitmap, drawPicture																				绘制位图和图片
// 绘制文本			drawText, drawPosText, drawTextOnPath																依次为 绘制文字、绘制文字时指定每个文字位置、根据路径绘制文字
// 绘制路径			drawPath																							绘制路径，绘制贝塞尔曲线时也需要用到该函数
// 顶点操作			drawVertices, drawBitmapMesh																		通过对顶点操作可以使图像形变，drawVertices直接对画布作用、 drawBitmapMesh只对绘制的Bitmap作用
// 画布剪裁			clipPath, clipRect																					设置画布的显示区域
// 画布快照			save, restore, saveLayerXxx, restoreToCount, getSaveCount											依次为 保存当前状态、 回滚到上一次保存的状态、 保存图层状态、 回滚到指定状态、 获取保存次数
// 画布变换			translate, scale, rotate, skew																		依次为 位移、缩放、 旋转、错切
// Matrix(矩阵)		getMatrix, setMatrix, concat																		实际上画布的位移，缩放等操作的都是图像矩阵Matrix， 只不过Matrix比较难以理解和使用，故封装了一些常用的方法。

// 利用Canvas绘制基本图形

// 绘制颜色：
// 绘制颜色是填充整个画布，常用于绘制底色

canvas.drawColor(Color.BLUE); //绘制蓝色

// 创建画笔：
// 要想绘制内容，首先需要先创建一个画笔，如下：

// 1.创建一个画笔
private Paint mPaint = new Paint();

// 2.初始化画笔
private void initPaint() {
	mPaint.setColor(Color.BLACK);       //设置画笔颜色
	mPaint.setStyle(Paint.Style.FILL);  //设置画笔模式为填充
	mPaint.setStrokeWidth(10f);         //设置画笔宽度为10px
}

// 3.在构造函数中初始化
public SloopView(Context context, AttributeSet attrs) {
   super(context, attrs);
   initPaint();
}

// 在创建完画笔之后，就可以在Canvas中绘制各种内容了

// 绘制点：
// 可以绘制一个点，也可以绘制一组点，如下：

canvas.drawPoint(200, 200, mPaint);     //在坐标(200,200)位置绘制一个点
canvas.drawPoints(new float[]{          //绘制一组点，坐标位置由float数组指定
      500,500,
      500,600,
      500,700
},mPaint);

// 关于坐标原点默认在左上角，水平向右为x轴增大方向，竖直向下为y轴增大方向

// 绘制直线：
// 绘制直线需要两个点，初始点和结束点，同样绘制直线也可以绘制一条或者绘制一组：

canvas.drawLine(300,300,500,600,mPaint);    // 在坐标(300,300)(500,600)之间绘制一条直线
canvas.drawLines(new float[]{               // 绘制一组线 每四数字(两个点的坐标)确定一条线
    100,200,200,200,
    100,300,200,300
},mPaint);

// 绘制矩形：
// 确定确定一个矩形最少需要四个数据，就是对角线的两个点的坐标值，这里一般采用左上角和右下角的两个点的坐标。
// 关于绘制矩形，Canvas提供了三种重载方法，
// 第一种就是提供四个数值(矩形左上角和右下角两个点的坐标)来确定一个矩形进行绘制。 
// 其余两种是先将矩形封装为Rect或RectF(实际上仍然是用两个坐标点来确定的矩形)，然后传递给Canvas绘制，如下：
// 注意: Rect是int(整形)的，而RectF是float(单精度浮点型)的

// 第一种
canvas.drawRect(100,100,800,400,mPaint);

// 第二种
Rect rect = new Rect(100,100,800,400);
canvas.drawRect(rect,mPaint);

// 第三种
RectF rectF = new RectF(100,100,800,400);
canvas.drawRect(rectF,mPaint);

// 以上三种方法所绘制出来的结果是完全一样的

// 绘制圆角矩形：
// 绘制圆角矩形也提供了两种重载方式，如下：

// 第一种
RectF rectF = new RectF(100,100,800,400);
canvas.drawRoundRect(rectF,30,30,mPaint);

// 第二种
canvas.drawRoundRect(100,100,800,400,30,30,mPaint);

// 上面两种方法绘制效果也是一样的，但鉴于第二种方法在API21的时候才添加上，所以我们一般使用的都是第一种

// 这里圆角矩形的角实际上不是一个正圆的圆弧，而是椭圆的圆弧，这里的两个参数(30,30)实际上是椭圆的两个半径

// 通过计算可知我们上次绘制的矩形宽度为700，高度为300，
// 当你让 rx大于350(宽度的一半)， ry大于150(高度的一半) 时奇迹就出现了， 你会发现圆角矩形变成了一个椭圆

// 实际上在rx为宽度的一半，ry为高度的一半时，刚好是一个椭圆，
// 通过上面我们分析的原理推算一下就能得到，而当rx大于宽度的一半，ry大于高度的一半时，实际上是无法计算出圆弧的，
// 所以drawRoundRect对大于该数值的参数进行了限制(修正)，凡是大于一半的参数均按照一半来处理

// 绘制椭圆：
// 相对于绘制圆角矩形，绘制椭圆就简单的多了，因为他只需要一个矩形矩形作为参数:

// 第一种
RectF rectF = new RectF(100,100,800,400);
canvas.drawOval(rectF,mPaint);

// 第二种
canvas.drawOval(100,100,800,400,mPaint);

// 同样，以上两种方法效果完全一样，但一般使用第一种

// 绘制圆：
// 绘制圆形也比较简单, 如下：

canvas.drawCircle(500,500,400,mPaint);  // 绘制一个圆心坐标在(500,500)，半径为400 的圆。
// 绘制圆形有四个参数，前两个是圆心坐标，第三个是半径，最后一个是画笔

// 绘制圆弧：
// 绘制圆弧就比较神奇一点了，为了理解这个比较神奇的东西，我们先看一下它需要的几个参数：

// 第一种
public void drawArc(@NonNull RectF oval, float startAngle, float sweepAngle, boolean useCenter, @NonNull Paint paint){}
    
// 第二种
public void drawArc(float left, float top, float right, float bottom, float startAngle,
            float sweepAngle, boolean useCenter, @NonNull Paint paint) {}
			
// 从上面可以看出，相比于绘制椭圆，绘制圆弧还多了三个参数：

startAngle  // 开始角度
sweepAngle  // 扫过角度
useCenter   // 是否使用中心

// 使用了中心点之后绘制出来类似于一个扇形，而不使用中心点则是圆弧起始点和结束点之间的连线加上圆弧围成的图形

// 简要介绍Paint
// 绘制一个圆，只要边不要里面的颜色
// 绘制的基本形状由Canvas确定，但绘制出来的颜色,具体效果则由Paint确定

// 一开始我们设置画笔样式的时候是这样的：

mPaint.setStyle(Paint.Style.FILL);  //设置画笔模式为填充

// 为了展示方便，容易看出效果，之前使用的模式一直为填充模式，实际上画笔有三种模式，如下：

STROKE                //描边
FILL                  //填充
FILL_AND_STROKE       //描边加填充

// 为了区分三者效果我们做如下实验：

Paint paint = new Paint();
paint.setColor(Color.BLUE);
paint.setStrokeWidth(40);     //为了实验效果明显，特地设置描边宽度非常大

// 描边
paint.setStyle(Paint.Style.STROKE);
canvas.drawCircle(200,200,100,paint);

// 填充
paint.setStyle(Paint.Style.FILL);
canvas.drawCircle(200,500,100,paint);

// 描边加填充
paint.setStyle(Paint.Style.FILL_AND_STROKE);
canvas.drawCircle(200, 800, 100, paint);

// 如果只需要边缘不需要填充内容的话只需要设置模式为描边(STROKE)即可

// demo:CanvasPieChart

// Canvas基本操作

// 画布操作
// 合理的使用画布操作可以帮助你用更容易理解的方式创作你想要的效果，这也是画布操作存在的原因
// PS: 所有的画布操作都只影响后续的绘制，对之前已经绘制过的内容没有影响

// 位移(translate)
// translate是坐标系的移动，可以为图形绘制选择一个合适的坐标系。 
// 请注意，位移是基于当前位置移动，而不是每次基于屏幕左上角的(0,0)点移动

// 省略了创建画笔的代码

// 在坐标原点绘制一个黑色圆形
mPaint.setColor(Color.BLACK);
canvas.translate(200,200);
canvas.drawCircle(0,0,100,mPaint);

// 在坐标原点绘制一个蓝色圆形
mPaint.setColor(Color.BLUE);
canvas.translate(200,200);
canvas.drawCircle(0,0,100,mPaint);

// 我们首先将坐标系移动一段距离绘制一个圆形，之后再移动一段距离绘制一个圆形，两次移动是可叠加的

// 缩放(scale)
// 缩放提供了两个方法，如下：

public void scale (float sx, float sy)

public final void scale (float sx, float sy, float px, float py)
// 这两个方法中前两个参数是相同的分别为x轴和y轴的缩放比例
// 而第二种方法比前一种多了两个参数，用来控制缩放中心位置的
// 缩放的中心默认为坐标原点,而缩放中心轴就是坐标轴

// 缩放比例(sx,sy)取值范围详解：

// 取值范围(n)	说明
// [-∞, -1)		先根据缩放中心放大n倍，再根据中心轴进行翻转
// -1			根据缩放中心轴进行翻转
// (-1, 0)		先根据缩放中心缩小到n，再根据中心轴进行翻转
// 0			不会显示，若sx为0，则宽度为0，不会显示，sy同理
// (0, 1)		根据缩放中心缩小到n
// 1			没有变化
// (1, +∞)		根据缩放中心放大n倍

// PS:和位移(translate)一样，缩放也是可以叠加的
canvas.scale(0.5f,0.5f);
canvas.scale(0.5f,0.1f);
// 调用两次缩放则 x轴实际缩放为0.5x0.5=0.25 y轴实际缩放为0.5x0.1=0.05

// 旋转(rotate)
// 旋转提供了两种方法：

public void rotate (float degrees)

public final void rotate (float degrees, float px, float py)
// 和缩放一样，第二种方法多出来的两个参数依旧是控制旋转中心点的。

// 默认的旋转中心依旧是坐标原点

// 旋转也是可叠加的

canvas.rotate(180);
canvas.rotate(20);
// 调用两次旋转，则实际的旋转角度为180+20=200度

// 错切(skew)
// skew这里翻译为错切，错切是特殊类型的线性变换。

// 错切只提供了一种方法：

public void skew (float sx, float sy)
// 参数含义：
// float sx:将画布在x方向上倾斜相应的角度，sx倾斜角度的tan值，
// float sy:将画布在y轴方向上倾斜相应的角度，sy为倾斜角度的tan值.

// 变换后:

X = x + sx * y
Y = sy * x + y

//错切也是可叠加的，不过请注意，调用次序不同绘制结果也会不同

// 快照(save)和回滚(restore)
// Q: 为什存在快照与回滚
// A：画布的操作是不可逆的，而且很多画布操作会影响后续的步骤，
// 例如第一个例子，两个圆形都是在坐标原点绘制的，而因为坐标系的移动绘制出来的实际位置不同。
// 所以会对画布的一些状态进行保存和回滚。

// 与之相关的API:

// 相关API			简介
// save				把当前的画布的状态进行保存，然后放入特定的栈中
// saveLayerXxx		新建一个图层，并放入特定的栈中
// restore			把栈中最顶层的画布状态取出来，并按照这个状态恢复当前的画布
// restoreToCount	弹出指定位置及其以上所有的状态，并按照指定位置的状态进行恢复
// getSaveCount		获取栈中内容的数量(即保存次数)

// 状态栈：
// 这个栈可以存储画布状态和图层状态

// Q：什么是画布和图层？
// A：实际上我们看到的画布是由多个图层构成的

// 实际上我们之前讲解的绘制操作和画布操作都是在默认图层上进行的。
// 在通常情况下，使用默认图层就可满足需求，但是如果需要绘制比较复杂的内容，
// 如地图(地图可以有多个地图层叠加而成，比如：政区层，道路层，兴趣点层)等，则分图层绘制比较好一些。
// 你可以把这些图层看做是一层一层的玻璃板，你在每层的玻璃板上绘制内容，然后把这些玻璃板叠在一起看就是最终效果

// save

// save 有两种方法：

// 保存全部状态
public int save ()

// 根据saveFlags参数保存一部分状态
public int save (int saveFlags)
// 可以看到第二种方法比第一种多了一个saveFlags参数，使用这个参数可以只保存一部分状态，更加灵活，
// 这个saveFlags参数具体可参考下面表格中的内容。

// 每调用一次save方法，都会在栈顶添加一条状态信息

// SaveFlags

// 名称								简介
// ALL_SAVE_FLAG					默认，保存全部状态
// CLIP_SAVE_FLAG					保存剪辑区
// CLIP_TO_LAYER_SAVE_FLAG			剪裁区作为图层保存
// FULL_COLOR_LAYER_SAVE_FLAG		保存图层的全部色彩通道
// HAS_ALPHA_LAYER_SAVE_FLAG		保存图层的alpha(不透明度)通道
// MATRIX_SAVE_FLAG					保存Matrix信息( translate, rotate, scale, skew)

// saveLayerXxx
// saveLayerXxx有比较多的方法：

// 无图层alpha(不透明度)通道
public int saveLayer (RectF bounds, Paint paint)
public int saveLayer (RectF bounds, Paint paint, int saveFlags)
public int saveLayer (float left, float top, float right, float bottom, Paint paint)
public int saveLayer (float left, float top, float right, float bottom, Paint paint, int saveFlags)

// 有图层alpha(不透明度)通道
public int saveLayerAlpha (RectF bounds, int alpha)
public int saveLayerAlpha (RectF bounds, int alpha, int saveFlags)
public int saveLayerAlpha (float left, float top, float right, float bottom, int alpha)
public int saveLayerAlpha (float left, float top, float right, float bottom, int alpha, int saveFlags)
// 注意：saveLayerXxx方法会让你花费更多的时间去渲染图像(图层多了相互之间叠加会导致计算量成倍增长)，
// 使用前请谨慎，如果可能，尽量避免使用。

// 使用saveLayerXxx方法，也会将图层状态也放入状态栈中，同样使用restore方法进行恢复。

// restore

// 状态回滚，就是从栈顶取出一个状态然后根据内容进行恢复

// restoreToCount

// 弹出指定位置以及以上所有状态，并根据指定位置状态进行恢复。

// 以上面状态栈图片为例，如果调用restoreToCount(2) 则会弹出 2 3 4 5 的状态，并根据第2次保存的状态进行恢复。

// getSaveCount

// 获取保存的次数，即状态栈中保存状态的数量，以上面状态栈图片为例，使用该函数的返回值为5。

// 不过请注意，该函数的最小返回值为1，即使弹出了所有的状态，返回值依旧为1，代表默认状态。

// 常用格式

// 虽然关于状态的保存和回滚啰嗦了不少，不过大多数情况下只需要记住下面的步骤就可以了：

save();      //保存状态
...          //具体操作
restore();   //回滚到之前的状态
// 这种方式也是最简单和最容易理解的使用方法。

// 绘制图片
// 绘制有两种方法，drawPicture(矢量图) 和 drawBitmap(位图)

// drawPicture

// 使用Picture前请关闭硬件加速，以免引起不必要的问题！

// 在AndroidMenifest文件中application节点下添上 android:hardwareAccelerated=”false”以关闭整个应用的硬件加速。

// 可以把Picture看作是一个录制Canvas操作的录像机

// 我们把Canvas绘制点，线，矩形等诸多操作用Picture录制下来，下次需要的时候拿来就能用，
// 使用Picture相比于再次调用绘图API，开销是比较小的，也就是说对于重复的操作可以更加省时省力

// Picture的相关方法

// 相关方法															简介
// public int getWidth ()											获取宽度
// public int getHeight ()											获取高度
// public Canvas beginRecording (int width, int height)				开始录制 (返回一个Canvas，在Canvas中所有的绘制都会存储在Picture中)
// public void endRecording ()										结束录制
// public void draw (Canvas canvas)									将Picture中内容绘制到Canvas中
// public static Picture createFromStream (InputStream stream)		(已废弃)通过输入流创建一个Picture
// public void writeToStream (OutputStream stream)					(已废弃)将Picture中内容写出到输出流中

// beginRecording 和 endRecording 是成对使用的，一个开始录制，一个是结束录制，两者之间的操作将会存储在Picture中

// 录制内容，即将一些Canvas操作用Picture存储起来，录制的内容是不会直接显示在屏幕上的，只是存储起来了而已。

// 1.创建Picture
private Picture mPicture = new Picture();

---------------------------------------------------------------

// 2.录制内容方法
private void recording() {
    // 开始录制 (接收返回值Canvas)
    Canvas canvas = mPicture.beginRecording(500, 500);
    // 创建一个画笔
    Paint paint = new Paint();
    paint.setColor(Color.BLUE);
    paint.setStyle(Paint.Style.FILL);

    // 在Canvas中具体操作
    // 位移
    canvas.translate(250,250);
    // 绘制一个圆
    canvas.drawCircle(0,0,100,paint);

    mPicture.endRecording();
}

---------------------------------------------------------------

// 3.在使用前调用(我在构造函数中调用了)
  public Canvas3(Context context, AttributeSet attrs) {
    super(context, attrs);
    
    recording();    // 调用录制
}

// 想要将Picture中的内容显示出来就需要手动调用播放(绘制)，
// 将Picture中的内容绘制出来可以有以下几种方法：

// 序号			简介
// 1			使用Picture提供的draw方法绘制。
// 2			使用Canvas提供的drawPicture方法绘制。
// 3			将Picture包装成为PictureDrawable，使用PictureDrawable的draw方法绘制。

// 以上几种方法主要区别：

// 主要区别					分类								简介
// 是否对Canvas有影响		1有影响,2,3不影响					此处指绘制完成后是否会影响Canvas的状态(Matrix clip等)
// 可操作性强弱				1可操作性较弱,2,3可操作性较强		此处的可操作性可以简单理解为对绘制结果可控程度。

// 使用Picture提供的draw方法绘制:

// 将Picture中的内容绘制在Canvas上
mPicture.draw(canvas);  

// PS：这种方法在比较低版本的系统上绘制后可能会影响Canvas状态，所以这种方法一般不会使用

// 使用Canvas提供的drawPicture方法绘制

// drawPicture有三种方法：

public void drawPicture (Picture picture)

public void drawPicture (Picture picture, Rect dst)

public void drawPicture (Picture picture, RectF dst)
// 和使用Picture的draw方法不同，Canvas的drawPicture不会影响Canvas状态。

// 简单示例:

canvas.drawPicture(mPicture,new RectF(0,0,mPicture.getWidth(),200));

// 绘制的内容根据选区进行了缩放

// 将Picture包装成为PictureDrawable，使用PictureDrawable的draw方法绘制。

// 包装成为Drawable
PictureDrawable drawable = new PictureDrawable(mPicture);
// 设置绘制区域 -- 注意此处所绘制的实际内容不会缩放
drawable.setBounds(0,0,250,mPicture.getHeight());
// 绘制
drawable.draw(canvas);

// PS:此处setBounds是设置在画布上的绘制区域，并非根据该区域进行缩放，也不是剪裁Picture，每次都从Picture的左上角开始绘制

// 获取Bitmap方式:

// 序号			获取方式					备注
// 1			通过Bitmap创建				复制一个已有的Bitmap(新Bitmap状态和原有的一致) 或者 创建一个空白的Bitmap(内容可改变)
// 2			通过BitmapDrawable获取		从资源文件 内存卡 网络等地方获取一张图片并转换为内容不可变的Bitmap
// 3			通过BitmapFactory获取		从资源文件 内存卡 网络等地方获取一张图片并转换为内容不可变的Bitmap

// 通常来说，我们绘制Bitmap都是读取已有的图片转换为Bitmap绘制到Canvas上

// 通过BitmapFactory从不同位置获取Bitmap:
// 资源文件(drawable/mipmap/raw):

Bitmap bitmap = BitmapFactory.decodeResource(mContext.getResources(),R.raw.bitmap);

// 资源文件(assets):

Bitmap bitmap=null;
try {
    InputStream is = mContext.getAssets().open("bitmap.png");
    bitmap = BitmapFactory.decodeStream(is);
    is.close();
} catch (IOException e) {
    e.printStackTrace();
}

// 内存卡文件:

Bitmap bitmap = BitmapFactory.decodeFile("/sdcard/bitmap.png");

// 网络文件:

// 此处省略了获取网络输入流的代码
Bitmap bitmap = BitmapFactory.decodeStream(is);
is.close();

// 绘制Bitmap：
// 依照惯例先预览一下drawBitmap的常用方法：

// 第一种
public void drawBitmap (Bitmap bitmap, Matrix matrix, Paint paint)

// 第二种
public void drawBitmap (Bitmap bitmap, float left, float top, Paint paint)

// 第三种
public void drawBitmap (Bitmap bitmap, Rect src, Rect dst, Paint paint)
public void drawBitmap (Bitmap bitmap, Rect src, RectF dst, Paint paint)

// 第一种方法中后两个参数(matrix, paint)是在绘制的时候对图片进行一些改变，
// 如果只是需要将图片内容绘制出来只需要如下操作就可以了：

canvas.drawBitmap(bitmap,new Matrix(),new Paint());

// PS:图片左上角位置默认为坐标原点。

// 第二种方法就是在绘制时指定了图片左上角的坐标(距离坐标原点的距离)：

// 注意：此处指定的是与坐标原点的距离，并非是与屏幕顶部和左侧的距离, 
// 虽然默认状态下两者是重合的，但是也请注意分别两者的不同。
canvas.drawBitmap(bitmap,200,500,new Paint());

// 第三种方法比较有意思，上面多了两个矩形区域(src,dst),这两个矩形选区是干什么用的？

// 名称							作用
// Rect src						指定绘制图片的区域
// Rect dst 或RectF dst			指定图片在屏幕上显示(绘制)的区域

// 示例：

// 将画布坐标系移动到画布中央
canvas.translate(mWidth/2,mHeight/2);

// 指定图片绘制区域(左上角的四分之一)
Rect src = new Rect(0,0,bitmap.getWidth()/2,bitmap.getHeight()/2);

// 指定图片在屏幕上显示的区域
Rect dst = new Rect(0,0,200,400);

// 绘制图片
canvas.drawBitmap(bitmap,src,dst,null);

// src指定了图片绘制部分的区域
// dst指定了绘制在屏幕上的绘制区域,图片宽高会根据指定的区域自动进行缩放

// 用一张图片包含了大量的素材，在绘制的时候每次只截取一部分进行绘制，这样可以大大的减少素材数量，而且素材管理起来也很方便

// 把同一个动画效果的所有资源图片整理到一张图片上，会大大的减少资源文件数量，方便管理
// 同时也节省了图片文件头、文件结束块以及调色板等占用的空间

// 绘制文字
// 预览一下相关常用方法：

// 第一类
public void drawText (String text, float x, float y, Paint paint)
public void drawText (String text, int start, int end, float x, float y, Paint paint)
public void drawText (CharSequence text, int start, int end, float x, float y, Paint paint)
public void drawText (char[] text, int index, int count, float x, float y, Paint paint)

// 第二类
public void drawPosText (String text, float[] pos, Paint paint)
public void drawPosText (char[] text, int index, int count, float[] pos, Paint paint)

// 第三类
public void drawTextOnPath (String text, Path path, float hOffset, float vOffset, Paint paint)
public void drawTextOnPath (char[] text, int index, int count, Path path, float hOffset, float vOffset, Paint paint)

// 绘制文字部分大致可以分为三类：

// 第一类只能指定文本基线位置(基线x默认在字符串左侧，基线y默认在字符串下方)。
// 第二类可以分别指定每个文字的位置。
// 第三类是指定一个路径，根据路径绘制文字。

// 通过上面常用方法的参数也可看出，绘制文字也是需要画笔的，而且文字的大小,颜色,字体,对齐方式都是由画笔控制的。

// Paint文本相关常用方法表

// 标题		相关方法						备注
// 色彩		setColor setARGB setAlpha		设置颜色，透明度
// 大小		setTextSize						设置文本字体大小
// 字体		setTypeface						设置或清除字体样式
// 样式		setStyle						填充(FILL),描边(STROKE),填充加描边(FILL_AND_STROKE)
// 对齐		setTextAlign					左对齐(LEFT),居中对齐(CENTER),右对齐(RIGHT)
// 测量		measureText						测量文本大小(注意，请在设置完文本各项参数后调用)

// 为了绘制文本，我们先创建一个文本画笔：

Paint textPaint = new Paint();          // 创建画笔
textPaint.setColor(Color.BLACK);        // 设置颜色
textPaint.setStyle(Paint.Style.FILL);   // 设置样式
textPaint.setTextSize(50);              // 设置字体大小

// 第一类(drawText)

// 第一类可以指定文本开始的位置，可以截取文本中部分内容进行绘制。

// 其中x，y两个参数是指定文本绘制两个基线,示例：

// 文本(要绘制的内容)
String str = "ABCDEFG";

// 参数分别为 (文本 基线x 基线y 画笔)
canvas.drawText(str,200,500,textPaint);

// 除了能指定绘制文本的起始位置，还能只取出文本中的一部分内容进行绘制。

// 截取文本中的一部分，对于String和CharSequence来说只指定字符串下标start和end位置(注意：0<= start < end < str.length())

// 以上一个例子使用的字符串为例，它的下标是这样的

// 字符	A	B	C	D	E	F	G
// 下标	0	1	2	3	4	5	6
// 假设我我们指定star为1，end为3，那么最终截取的字符串就是”BC”。

// 一般来说，使用start和end指定的区间是前闭后开的，即包含start指定的下标，而不包含end指定的下标，
// 故[1,3)最后获取到的下标只有 下标1 和 下标2 的字符，就是”BC”

// 示例：

// 文本(要绘制的内容)
String str = "ABCDEFG";

// 参数分别为 (字符串 开始截取位置 结束截取位置 基线x 基线y 画笔)
canvas.drawText(str,1,3,200,500,textPaint);

// 另外，对于字符数组char[]我们截取字符串使用起始位置(index)和长度(count)来确定。

// 同样，我们指定index为1，count为3，那么最终截取到的字符串是”BCD”.

// 其实就是从下标位置为1处向后数3位就是截取到的字符串，示例：

// 字符数组(要绘制的内容)
char[] chars = "ABCDEFG".toCharArray();

// 参数为 (字符数组 起始坐标 截取长度 基线x 基线y 画笔)
canvas.drawText(chars,1,3,200,500,textPaint);

// 第二类(drawPosText)

// 通过和第一类比较，我们可以发现，第二类中没有指定x，y坐标的参数，而是出现了这样一个参数float[] pos。

// 好吧，这个名为pos的浮点型数组就是指定坐标的，至于为啥要用数组嘛，因为这家伙野心比较大，想给每个字符都指定一个位置。

// 示例：

String str = "SLOOP";

canvas.drawPosText(str,new float[]{
      100,100,    // 第一个字符位置
      200,200,    // 第二个字符位置
      300,300,    // ...
      400,400,
      500,500
},textPaint);

// 不过嘛，虽然虽然这个方法也比较容易理解，但是关于这个方法我个人是不推荐使用的，因为坑比较多，主要有一下几点：

// 序号		反对理由
// 1		必须指定所有字符位置，否则直接crash掉，反人类设计
// 2		性能不佳，在大量使用的时候可能导致卡顿
// 3		不支持emoji等特殊字符，不支持字形组合与分解

// 关于第二类的第二种方法：

public void drawPosText (char[] text, int index, int count, float[] pos, Paint paint)
// 和上面一样，就是从字符数组中切出来一段进行绘制

